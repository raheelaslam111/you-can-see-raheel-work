from odoo import models, _,api,fields
import logging
_logger = logging.getLogger(__name__)

class SaleOrderMO(models.Model):
    _inherit = 'sale.order'

    mrp_production_count = fields.Integer(
        "Count of MO generated",
        compute='_compute_mrp_production_count',
        groups='mrp.group_mrp_user')

    @api.depends('procurement_group_id.stock_move_ids.created_production_id.procurement_group_id.mrp_production_ids')
    def _compute_mrp_production_count(self):
        for sale in self:
            mrp_production_ids = sale.procurement_group_id.stock_move_ids.created_production_id.procurement_group_id.mrp_production_ids.mapped('id')
            other_mrp_orders_found = self.env['mrp.production'].sudo().search([('origin', '=', sale.name)])
            #_logger.info(other_mrp_orders_found)
            if other_mrp_orders_found:
                mrp_production_ids.extend(other_mrp_orders_found.ids) #.filtered(lambda mo: mo.procurement_group_id.id == sale.procurement_group_id.id)
            sale.mrp_production_count = len(list(set(mrp_production_ids)))
    
    def action_view_mrp_production(self):
        self.ensure_one()
        #print("here here")
        mrp_production_ids = self.procurement_group_id.stock_move_ids.created_production_id.procurement_group_id.mrp_production_ids.ids
        other_mrp_orders_found = self.env['mrp.production'].search([('origin', '=', self.name)])
        if other_mrp_orders_found:
            mrp_production_ids.extend(other_mrp_orders_found.ids)#.filtered(lambda mo: mo.procurement_group_id.id == self.procurement_group_id.id)
            #_logger.info(other_mrp_orders_found)
        action = {
            'res_model': 'mrp.production',
            'type': 'ir.actions.act_window',
            'context':{'default_origin':self.name, 'active_sale_order_id': self.ids[0]},
            'domain':{'product_id':[('sale_ok', '=', True)]}
        }
        if len(mrp_production_ids) == 1:
            #print("mrp_production_ids ",mrp_production_ids)
            action.update({
                'view_mode': 'form',
                'res_id': mrp_production_ids[0],
            })
        else:
            #print("mrp_production_ids ",mrp_production_ids)
            action.update({
                'name': _("Manufacturing Orders Generated by %s", self.name),
                'domain': [('id', 'in', mrp_production_ids),('origin','=',self.name)],
                'view_mode': 'tree,form',
            })
        return action
    